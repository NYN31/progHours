version: "3"
services:
  # Multi-stage build for client app and serving it through nginx
  nginx:
    container_name: nginx
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    ports:
      - 80:80
      - 443:443
    environment:
      PORT: 80
    depends_on:
      - api_server
    networks:
      - progHours
    volumes:
      - ./ssl:/etc/ssl
  # NestJS API server
  api_server:
    container_name: api_server
    env_file:
      - .env
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db_server:${POSTGRES_PORT}/${POSTGRES_DB}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
    depends_on:
      - db_server
    networks:
      - progHours
  # PostgreSQL Database Server
  db_server:
    image: postgres:14
    container_name: db_server
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - ${POSTGRES_PORT}:5432
    expose:
      - ${POSTGRES_PORT} # Port for other containers but NOT to host machine
    volumes:
      - ./pg-data:/var/lib/postgresql/data
    networks:
      - progHours
  adminer:
    container_name: adminer
    image: adminer
    restart: always
    ports:
      - ${ADMINER_PORT}:8080
    environment:
      ADMINER_DEFAULT_DB_DRIVER: pgsql
    depends_on:
      - db_server
    networks:
      - progHours
networks:
  progHours:
    driver: bridge
